#!/usr/bin/perl
use 5.030 ; use warnings ; 
use Getopt::Std ; 
use Term::ANSIColor qw [ :constants ] ; $Term::ANSIColor::AUTORESET = 1 ;
use List::Util qw[ sum sum0 ] ; 
use POSIX qw [ floor ceil ] ;
use Math::Random::MT qw[ rand srand ] ; # Florent Angly 氏が作成。
use Time::HiRes qw[ gettimeofday tv_interval ] ; 
use List::BinarySearch qw[ binsearch  binsearch_pos  binsearch_range ] ; 
use Memoize ; 
memoize qw[ rp ] ; 


my $t0 = [gettimeofday] ;
my @argv = @ARGV ;
getopts 'b:cd:g:m:s:t:' , \my%o ; 
my $seed = exists $o{s} ? srand $o{s} : srand ;
#srand ( $seed ) ;
# テストはここに書く。
if ( exists $o{T} ) { 
  my $cmd ; 
  do { 
    no warnings 'experimental::smartmatch' ; 
    $cmd = "$0 -t 3e4 -s1" when 's1'  ; # シードを固定。Math::Random::MT qw[ rand srand ] で最後の出力は 4260 となる。
  } for $o{T} ;
  system $cmd ; 
  exit ;
}

# 終了時の処理
END{ 
  exit if exists $o{T} ;
  exit if 0 eq ($o{2}//'') ; 
  say STDERR RED BOLD FAINT "Random seed = $seed" if ! $o{F} ;
  say STDERR RED BOLD FAINT "The elapsed second = " .tv_interval ($t0) ;
}

$o{g} //= 10 ; # 何回反復するか
$o{d} //= 1 ; # 10 ** $o{d} の数が最大となる(10の何乗まで調べるのか;主に何桁の分母について調べるのか)
$o{m} //= 4 ;
$o{t} //= 10 ** $o{d} * 0.5 ; # To or Towards 
my $u10 = 10 ** $o{d}  ; 

## fig から 候補となる分母を参照するための表を作る。
my @f2d ; #  keys %{ $f2d{ $fig } }  == [ denom1, denom2, denom3 .. ]のようになる
for my $den ( 2 .. $o{t} ) {  # den ← denominator
  my @figs = () ; # その分母が小数点以下d桁でどんなfigureを生成するかを、この2行で求める。
  push @figs , int 0.5 + $u10 * $_ / $den for 1 .. ( $den - 1 ) ; # $den-1
  $f2d [ $_ ] { $den } = 1 for @figs ; # <-- 変数の使い方は、これが分かりやすい。
}

## バイナリサーチされるリストを作る
my @priorAcc ;
if ( 0 ne ($o{b}//'') ) { 
  do { my $s ; push @priorAcc , $s += 1 / $_ for 2 .. $o{t} ; $_ /= $s for @priorAcc } ; # 各分母をどれだけの割合で生成するか関係するのが2番目の式
} else { 
  do { my $s ; push @priorAcc , ++$s for 2 .. $o{t} ; $_ /= $s for @priorAcc } ; # 各分母をどれだけの割合で生成するか関係するのが2番目の式
}# 使い方:   my $den = 2 + binsearch_pos { $a <=> $b } rand , @N ; ## Find the lowest index of a matching element, or best insert point.

## 
for ( 1 .. $o{g} ) { 
  my $den = 2 + binsearch_pos { $a <=> $b } rand , @priorAcc ;
  & den2p ( $den ) ; 
}

sub den2p ( $ ) {  # 引数は分母の値。$o{m}の値を用いる。
  my $den = $_[0] ;
  my @figs = map {int 0.5 + $u10 * $_ / $den } map { 1 + int rand ( $den - 1 ) } 1 .. $o{m} ; 
  my @ocan = () ;
  if ( @figs ) { # この5行で、共通集合を計算。
    my %comm ; 
    $comm { $_ } = 1 for keys %{ $f2d [ $figs [ 0 ] ] } ;
    for my $c ( @figs[ 1 .. $#figs ] ) { grep { ! exists $f2d[$c]{$_} && delete $comm{$_} } keys %comm } ;
    @ocan = grep { $_ != $den } keys %comm ; # <-- - 当初はcandidate のつもり。$denを抜くことにした。
  }
  my $osum = sum0 ( map { & rp ( $_ ) } @ocan )  ;
  my $oone = & rp ( $den ) ;
  my $value = ( $o{c} ? $osum : $oone )  / ($osum + $oone ) ;
  my $figstr = join ';' , map { s/^0//r } map { $_ / $u10 } sort { $a <=> $b } @figs ;
  say join "\t" , $den , $value , $figstr , ( join ';' , sort { $a <=> $b } @ocan )  ;
}

sub rp ( $ ) {  
  return 1 / ( ( $_[0] - 1 ) ** $o{m} ) if 0 eq ($o{b}//'') ; 
  return 1 / ( $_[0] * ( $_[0] - 1 ) ** $o{m} )  
} ; 


exit ;


sub VERSION_MESSAGE {}
sub HELP_MESSAGE {
  use FindBin qw[ $Script ] ;
  $ARGV[1] //= '' ;
  open my $FH , '<' , $0 ;
  while(<$FH>){
    s/\$0/$Script/g ;
    print $_ if $ARGV[1] eq 'opt' ? m/^\ +\-/ : s/^=head1// .. s/^=cut// ;
  }
  close $FH ;
  exit 0 ;
}


=encoding utf8

=head1

  $0 
    「疑似正答率」を出力。元の分母Dと共に。2〜10^d/2のどれかの値の分母で生成された割合近似値(小数点以下d桁)がm個
    与えられた場合に、分母の値の候補を逆算して、それらの中から元のDにどれだけ確信を持てるかをベイズの考え方で
    計算する。

   出力は4列。タブ文字区切り。
    1列目 : 元の分母 D
    2列目 : 疑似正答率
    3列目 : 生成した割合近似値いくつかをセミコロンで結合
    4列目 : 元の分母 D より他の、分母の値の候補をセミコロンで結合

  オプション: 

   -d N : 分母は2から10^N の半分までしらべる。未指定なら1。(この数値をdとする。)
   -g N : 何回実験するか。未指定なら10。(get)
   -m N : 何個の分子を取り出すか(mとする)。未指定なら4。分母Dに対して1からD-1までのD-1通りの中から、一様にランダムに選ぶ。
   -s N : ランダムシードの設定
   -t N : 分母の上限。未指定なら10 ** $o{d} /2 。

   -b 0 : 通常は、分母の値Dに対して1/Dに比例する事前分布を入れているが、-b 0 でフラットになる。
   -c   : 通常出力する確率に対して、その1の補数で出力するようにする。(後で1に近い値ロジット変換することを想定している。)

  使用例: 

  開発メモ: 
   * オプションによる場合分けが数カ所で発生。これにより計算の効率が小さく下がる。大きく下がってないことを願う。
   * 他に出力すべきものはないか?


=cut
